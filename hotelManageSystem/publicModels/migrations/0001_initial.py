# Generated by Django 5.1.3 on 2024-12-13 12:09

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AirCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('airCondition_status', models.IntegerField(default=0)),
                ('target_temperature', models.IntegerField(blank=True, null=True)),
                ('current_temperature', models.IntegerField(blank=True, null=True)),
                ('speed', models.IntegerField(blank=True, choices=[('1', '低风速'), ('2', '中风速'), ('3', '高风速')], default=1, null=True)),
                ('airCondition_mode', models.CharField(default='cold', max_length=100)),
                ('total_price', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=5, null=True)),
            ],
            options={
                'db_table': 'aircondition',
            },
        ),
        migrations.CreateModel(
            name='CentralAirCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_temperature_cold', models.IntegerField(blank=True, null=True)),
                ('min_temperature_cold', models.IntegerField(blank=True, null=True)),
                ('max_temperature_hot', models.IntegerField(blank=True, null=True)),
                ('min_temperature_hot', models.IntegerField(blank=True, null=True)),
                ('price_rate', models.IntegerField(blank=True, null=True)),
                ('mode', models.CharField(choices=[('cold', '制冷'), ('sun', '制热'), ('dry', '除湿'), ('wind', '送风')], default='cold', max_length=100)),
                ('central_aircondition_status', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'central_air_condition',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('identity_card', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'customer',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('front_desk', '前台'), ('ac_manager', '空调管理员'), ('hotel_manager', '酒店经理')], max_length=20)),
                ('secret_key', models.CharField(blank=True, max_length=255, null=True)),
                ('username', models.CharField(max_length=100, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_price', models.IntegerField(blank=True, null=True)),
                ('room_status', models.IntegerField(blank=True, default=0, null=True)),
                ('airConditioner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='publicModels.aircondition')),
                ('customer', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='publicModels.customer')),
            ],
            options={
                'db_table': 'room',
            },
        ),
        migrations.CreateModel(
            name='Detail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_in_time', models.IntegerField(blank=True, null=True)),
                ('stay_days', models.IntegerField(blank=True, default=1, null=True)),
                ('status', models.IntegerField(blank=True, default=1, null=True)),
                ('room', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='publicModels.room')),
            ],
            options={
                'db_table': 'detail',
            },
        ),
        migrations.CreateModel(
            name='AirServiceLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_time', models.IntegerField(blank=True, null=True)),
                ('start_time', models.IntegerField(blank=True, null=True)),
                ('end_time', models.IntegerField(blank=True, null=True)),
                ('service_price', models.FloatField(blank=True, null=True)),
                ('service_type', models.CharField(blank=True, max_length=20, null=True)),
                ('current_speed', models.IntegerField(blank=True, default=1, null=True)),
                ('airCondition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='publicModels.aircondition')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='publicModels.room')),
            ],
            options={
                'db_table': 'air_service_log',
            },
        ),
        migrations.CreateModel(
            name='AirBill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('one_time_price', models.IntegerField(blank=True, default=0, null=True)),
                ('flag', models.IntegerField()),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='publicModels.room')),
            ],
            options={
                'db_table': 'airbill',
            },
        ),
    ]
